package com.example.dentalclinicschedulingplatform.service.impl;

import com.example.dentalclinicschedulingplatform.entity.ChatRoom;
import com.example.dentalclinicschedulingplatform.service.IChatRoomService;
import com.google.firebase.database.*;
import org.springframework.stereotype.Service;

import java.util.concurrent.CompletableFuture;

@Service
public class ChatRoomService implements IChatRoomService {

    private final FirebaseDatabase firebaseDatabase;

    public ChatRoomService() {
        this.firebaseDatabase = FirebaseDatabase.getInstance();
    }

    @Override
    public CompletableFuture<String> getChatRoomId(String senderId, String recipientId, boolean createNewRoomIfNotExists) {
        CompletableFuture<String> future = new CompletableFuture<>();
        DatabaseReference chatRoomsRef = firebaseDatabase.getReference().child("chatRooms");
        Query query = chatRoomsRef.orderByChild("senderId").equalTo(senderId);

        query.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                for (DataSnapshot snapshot : dataSnapshot.getChildren()) {
                    ChatRoom chatRoom = snapshot.getValue(ChatRoom.class);
                    if (chatRoom != null && chatRoom.getRecipientId().equals(recipientId)) {
                        future.complete(chatRoom.getChatId());
                        return;
                    }
                }
                if (createNewRoomIfNotExists) {
                    String newChatId = createChatId(senderId, recipientId);
                    future.complete(newChatId);
                } else {
                    future.complete(null); // No chat room found and not creating new
                }
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {
                future.completeExceptionally(databaseError.toException());
            }
        });

        return future;
    }

    private String createChatId(String senderId, String recipientId) {
        String chatId = String.format("%s_%s", senderId, recipientId);

        DatabaseReference chatRoomsRef = firebaseDatabase.getReference().child("chatRooms");
        DatabaseReference newChatRoomsRef = chatRoomsRef.push();

        String roomId = newChatRoomsRef.getKey(); // Get the unique key generated by push()

        ChatRoom senderRecipient = ChatRoom.builder()
                .id(roomId)
                .chatId(chatId)
                .senderId(senderId)
                .recipientId(recipientId)
                .build();

        ChatRoom recipientSender = ChatRoom.builder()
                .id(roomId) // Use the same roomId for both senderRecipient and recipientSender
                .chatId(chatId)
                .senderId(recipientId)
                .recipientId(senderId)
                .build();

        chatRoomsRef.setValueAsync(senderRecipient);
        chatRoomsRef.setValueAsync(recipientSender);

        return chatId;
    }
}
